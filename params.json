{
  "name": "Doceact",
  "tagline": "React, Express, Node, Mongodb",
  "body": "# doceact\r\n\r\nAdapted from the `webpack-express-boilerplate` forked from @gottsohn\r\n\r\n[![Javascript Version][javascript-image]][javascript-url]\r\n[![React Version][reactjs-image]][reactjs-url]\r\n[![Firebase Version][firebase-image]][firebase-url]\r\n[![Material UI Version][material-ui-image]][material-ui-url]\r\n[![Build Status](https://semaphoreci.com/api/v1/andela-nmartin/doceact/branches/master/shields_badge.svg)](https://semaphoreci.com/andela-nmartin/doceact)\r\n[![Coverage Status](https://coveralls.io/repos/github/andela-nmartin/doceact/badge.svg?branch=master)](https://coveralls.io/github/andela-nmartin/doceact?branch=master)\r\n[![License][license-image]][license-url]\r\n\r\n\r\nThe MIT License (MIT). Please see [License File](LICENSE) for more information.\r\n\r\n[javascript-image]:https://img.shields.io/badge/Javascript-ES6-yellow.svg\r\n[javascript-url]: https://developer.mozilla.org/en-US/docs/Web/JavaScript\r\n[reactjs-image]:https://img.shields.io/badge/ReactJS-15.1.0-blue.svg\r\n[reactjs-url]: https://facebook.github.io/react\r\n[firebase-image]:https://img.shields.io/badge/Firebase-3.0.4-orange.svg\r\n[firebase-url]: https://firebase.google.com\r\n[material-ui-image]:https://img.shields.io/badge/Material--UI-0.15.0-lightgrey.svg\r\n[material-ui-url]: https://material-ui.org\r\n[license-image]: https://img.shields.io/badge/License-MIT-red.svg\r\n[license-url]: LICENSE\r\n\r\n\r\n## Document Management System (React, Node, Express, Mongo)\r\n\r\n##  Models\r\nThe models contained are `users`, `documents` and `roles`. A document belongs to a `User` and is related to them using the `ownerId`. A `Role` is related to the `User` using the `id` field. Each `Document` has restrictions on the roles. A `Role` also relates to the `Document` using the `title`.\r\n\r\n## Testing\r\nBack end testing is done using the `superagent` node module which is installed via `npm` when you install all the other node modules in `package.json`. `superagent` is used to make requests to the api routes and receive responses. The tests are run on terminal using the command: \r\n```\r\njasmine-node tests/ --verbose\r\n```\r\nFront end testing is done using `chai` and `sinon`\r\n## Express Routes\r\nThe routes are created using `express` routers. The server needs to be started using the terminal command `nodemon server.js`. Our server file is called `server.js`. The routes are defined in the `./server/routes/api.js` file.\r\n\r\n## Mongo Database\r\nOne needs an installation of `Mongodb` locally. Our database is called `docms`. We connect to it using the configurations in `./server/config/config.js` file.\r\n```\r\n'database': 'mongodb://localhost/docms',\r\n```\r\nThis line in particular is needed. To use this database throughout the run-time of the application, one needs to run the command `mongod` on the terminal.\r\nThe database needs to be dropped first, before the tests are run. It is dropped in the express server by the command:\r\n```\r\nmongoose.connection.db.dropDatabase(function(err) {\r\n  if (err) {\r\n    return err;\r\n  } else {\r\n    console.log('Dropped database');\r\n    (function() {\r\n      seed.seeder();\r\n    })();\r\n  }\r\n});\r\n```\r\n## Front End\r\nThe front end is composite, rendered by `ReactJs`.",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}